<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://Littlecowherd.github.io</id>
    <title>小酒馆</title>
    <updated>2019-07-31T01:12:09.921Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://Littlecowherd.github.io"/>
    <link rel="self" href="https://Littlecowherd.github.io/atom.xml"/>
    <subtitle>从前有个人的小酒馆</subtitle>
    <logo>https://Littlecowherd.github.io/images/avatar.png</logo>
    <icon>https://Littlecowherd.github.io/favicon.ico</icon>
    <rights>All rights reserved 2019, 小酒馆</rights>
    <entry>
        <title type="html"><![CDATA[ 记一次Scrapy进程卡死的Debug过程]]></title>
        <id>https://Littlecowherd.github.io/post/ji-yi-ci-scrapy-jin-cheng-qia-si-de-debug-guo-cheng</id>
        <link href="https://Littlecowherd.github.io/post/ji-yi-ci-scrapy-jin-cheng-qia-si-de-debug-guo-cheng">
        </link>
        <updated>2019-07-30T06:41:09.000Z</updated>
        <content type="html"><![CDATA[<h2 id="发现问题">发现问题</h2>
<p>日常巡查数据入库情况时，发现最新数据的入库时间停在了凌晨。立刻登录远程服务器，尝试定位问题。</p>
<ol>
<li>
<p>定时任务是否正常工作，是否有报错信息</p>
<pre><code>crontab -l
</code></pre>
<p>经检查发现，定时任务工作正常，也没有运行报错的记录。</p>
</li>
<li>
<p>查看系统进程，采集程序是否运行</p>
<pre><code>ps -ef | grep xxxappspider
</code></pre>
<p>输出信息如下</p>
<p><img src="https://Littlecowherd.github.io/post-images/1564469201050.png" alt=""></p>
<p>可以看到进程在凌晨 01:40 成功启动了，但是一直没有执行完成，推测是代码出现了死锁等问题？查看日志也没有记录到有用的信息。</p>
</li>
<li>
<p>检查代码，尝试复现该bug</p>
<p>在服务器手动执行程序，均能正常运行。简单复查代码，也没有发现哪里会导致死锁。</p>
</li>
</ol>
<h2 id="解决问题">解决问题</h2>
<p>由于手头还有比较急的任务，只是给程序加上了更详细的日志记录，然后 kill 掉卡住的进程，让定时任务重新运行起来。</p>
<p>第二天问题再次出现，同样是凌晨的定时任务出现了卡死的情况。首先排除服务器原因，相同服务器其他任务均正常运行。其次排除存储原因，我们的采集结果是统一入到 Kafka 队列，经过一系列的操作后存储到数据库的。这个 Kafka 队列所有应用都在使用，如果出现问题不会只这一个任务。然后大致可以确定，是这个任务在<strong>凌晨</strong>运行时，会因为某些原因导致卡死。</p>
<p>好了，是时候祭出我们的大杀器： <a href="https://github.com/benfred/py-spy">py-spy</a></p>
<p>这是一个 Python 的性能分析工具，我是在听<a href="https://pythonhunter.org/">《捕蛇者说》</a>的时候了解到的这个库，现在正好拿来用用。</p>
<p>先简单看下怎么用：</p>
<pre><code class="language-bash">[test@localhost ~]# py-spy --help
py-spy 0.1.11
A sampling profiler for Python programs

USAGE:
    py-spy [FLAGS] [OPTIONS] --pid &lt;pid&gt; [python_program]...

FLAGS:
        --dump           Dump the current stack traces to stdout
    -F, --function       Aggregate samples by function name instead of by line number
    -h, --help           Prints help information
        --nonblocking    Don't pause the python process when collecting samples. Setting this option will reduce the
                         perfomance impact of sampling, but may lead to inaccurate results
    -V, --version        Prints version information

OPTIONS:
    -d, --duration &lt;duration&gt;    The number of seconds to sample for when generating a flame graph [default: 2]
    -f, --flame &lt;flamefile&gt;      Generate a flame graph and write to a file
    -p, --pid &lt;pid&gt;              PID of a running python program to spy on
    -r, --rate &lt;rate&gt;            The number of samples to collect per second [default: 100]

ARGS:
    &lt;python_program&gt;...    commandline of a python program to run

</code></pre>
<p>只需要输入 Python 进程的 pid 就能直观的显示该进程中各项任务的耗时情况。更重要的是，它<strong>不需要重启代码</strong>就能运行，非常适合我们现在遇到的情况。</p>
<p>安装很简单：</p>
<pre><code class="language-bash">pip install py-spy
</code></pre>
<p>使用很简单：</p>
<pre><code class="language-bash"># 先找到这个卡住的Python进程的pid
ps -ef |grep python |grep ***
# 启动 py-spy 观察这进程
py-spy --pid 32179
</code></pre>
<p>输出信息如下：</p>
<p><img src="https://Littlecowherd.github.io/post-images/1564469215602.png" alt=""></p>
<p>可以看到，程序是卡在了建立网络连接的部分。<code>hand_request</code>是一个为某个App请求签名的函数，被单独放在了<code>utils</code>这个目录下。接下来就简单了，找到这个函数，在第43行，发现了一个 post 请求。嗯，其实不管是 post 还是 get 都不要紧，重要的是这个请求没有加 <code>timeout</code> 参数！！！</p>
<p><strong>Requests 文档里写的很清楚了，如果没有超时参数，程序有可能永远失去响应。</strong></p>
<blockquote>
<h2 id="超时">超时</h2>
<p>你可以告诉 requests 在经过以 <code>timeout</code> 参数设定的秒数时间之后停止等待响应。基本上所有的生产代码都应该使用这一参数。如果不使用，你的程序可能会永远失去响应：</p>
<pre><code>&gt;&gt;&gt; requests.get('http://github.com', timeout=0.001)
Traceback (most recent call last):
  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;
requests.exceptions.Timeout: HTTPConnectionPool(host='github.com', port=80): Request timed out. (timeout=0.001)
</code></pre>
<p>注意</p>
<p><code>timeout</code> 仅对连接过程有效，与响应体的下载无关。 <code>timeout</code> 并不是整个下载响应的时间限制，而是如果服务器在 <code>timeout</code> 秒内没有应答，将会引发一个异常（更精确地说，是在<code>timeout</code> 秒内没有从基础套接字上接收到任何字节的数据时）If no timeout is specified explicitly, requests do not time out.</p>
</blockquote>
<p>至此，Debug完成。</p>
<h2 id="总结">总结</h2>
<p>这么低级的 bug，确实是我自己写的。</p>
<p>当初写的时候忽视了这个问题，测试的时候没有发现问题也就过去了。第一次发现问题的时候，查问题并不仔细，只简单看了<code>spiders</code>目录下的几个爬虫代码，没有去检查<code>utils</code>目录下的工具类的代码，故而并没有找到具体问题。第二次通过 py-spy 的帮助，成功找到并解决了问题。</p>
<p>解决问题后，反思下原因：很可能是这个 App 会在凌晨进行维护，导致请求没有得到响应，同时没有设置超时函数，程序就会一直卡在哪里。</p>
<p>最后，推荐一下《捕蛇者说》，这是一个关于“编程、程序员、Python”的中文博客。没事听听大佬们唠嗑，真的很涨知识。</p>
<h2 id="参考链接">参考链接</h2>
<ol>
<li><a href="https://github.com/benfred/py-spy">py-spy 的官方地址</a></li>
<li><a href="https://pythonhunter.org/episodes/2">Ep 02. 开发中的碎碎念 ——《捕蛇者说》</a></li>
<li><a href="https://2.python-requests.org//zh_CN/latest/user/quickstart.html#id10">超时 ——Requests 官方文档</a></li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[超详细CloudCone使用指南]]></title>
        <id>https://Littlecowherd.github.io/post/chao-xiang-xi-cloudcone-shi-yong-zhi-nan</id>
        <link href="https://Littlecowherd.github.io/post/chao-xiang-xi-cloudcone-shi-yong-zhi-nan">
        </link>
        <updated>2019-04-18T09:26:51.000Z</updated>
        <content type="html"><![CDATA[<h2 id="起因">起因</h2>
<p>相较于其他 VPS 提供商（ <a href="https://www.vultr.com/?ref=7468133">Vultr</a> 、<a href="https://m.do.co/c/b4f1eed9d029">DigitalOcean</a>、<a href="https://www.linode.com/">Linode</a> 等等），CloudCone 比较新，知名度比较低。得益于这一点，这家服务商的 IP 段在学校还能正常访问，这也是我选择它的最根本原因。</p>
<h2 id="开始试用">开始试用</h2>
<h3 id="1-注册账号">1. 注册账号</h3>
<p>你可以点击 <a href="https://app.cloudcone.com/?ref=486">CloudCone</a> 来登录或者注册，如下图所示。</p>
<p><img src="https://raw.githubusercontent.com/Littlecowherd/Images/master/markdown/20181220133730.png" alt=""></p>
<p>如果已有账号 ，输入账号密码点击 Log in 即可登录。如果没有账号请点击 Sign up 跳转到注册界面，如下图所示。</p>
<p><img src="https://raw.githubusercontent.com/Littlecowherd/Images/master/markdown/20181220134049.png" alt=""></p>
<p>按照图中标识填写注册完成，点击 Create My Account 即可创建账号。</p>
<p><em>注：How did you hear about us？ 这个问题可以不填写。</em></p>
<h3 id="2-充值">2. 充值</h3>
<p>注册成功，登录账号会看到如下一个界面。</p>
<p><img src="https://raw.githubusercontent.com/Littlecowherd/Images/master/markdown/20181220194449.png" alt=""></p>
<p>因为我已经有一台云服务器了，你看到的界面可能和我的有些不一样，但是没啥关系。</p>
<p>点击右上角的加号，选择 billing，进入充值页面，如下图所示。</p>
<p><img src="https://raw.githubusercontent.com/Littlecowherd/Images/master/markdown/20181220194745.png" alt=""></p>
<p>进入充值页面后选择 Add funds</p>
<p><img src="https://raw.githubusercontent.com/Littlecowherd/Images/master/markdown/20181220194958.png" alt=""></p>
<p>可以看到支持的充值方式为有 PayPal 和 Alipay（支付宝）等方式</p>
<p><img src="https://raw.githubusercontent.com/Littlecowherd/Images/master/markdown/20181220195104.png" alt=""></p>
<p>说一下这两种支付方式的区别：PayPal 可以自定义充值金额，最低充值金额是 $1，但是不够方便，可能还得注册账号绑定银行卡；支付宝要方便的多，但是最低充值金额是 $5，30 多块人民币。具体怎么选看你的喜好。</p>
<p>值得一提的是，这个页面的最下面有个 Promotional Codes，如果有优惠码的话，可以填写在这里，如下图所示。</p>
<p><img src="https://raw.githubusercontent.com/Littlecowherd/Images/master/markdown/20181220204412.png" alt=""></p>
<p>关于这个优惠码，我问了客服，优惠码没拿到，他倒是给了我一个促销链接。请点击<a href="https://cloudcone.com/offers">这里</a>查看 。此外这家服务商偶尔还会发送一些促销邮件，有一些价格很低的套餐值得一试。</p>
<h3 id="3-选购服务器">3. 选购服务器</h3>
<p>再次点击右上角的加号，选择 Cloud Server ，进入配置选择界面，如下图。</p>
<p><img src="https://raw.githubusercontent.com/Littlecowherd/Images/master/markdown/20181220222241.png" alt=""></p>
<p>新用户有首月 $1.99 的优惠，我这里已经变回正常价格了。</p>
<p>可供选择的镜像类型如下图</p>
<p><img src="https://raw.githubusercontent.com/Littlecowherd/Images/master/markdown/20181220222459.png" alt=""></p>
<p><em>这里说明一点， 列表最下放的 CentOS 7.5 是开启了BBR加速的，访问速度可能会好一点。当然，也可以选择默认不开启BBR的服务器，然后自己手动启动BBR加速，也不会很麻烦。</em></p>
<p>根据自己的需要选择配置，如果只是用来搭梯子的话，统统选择最低配置就完全够用了。 再有一点，hostname项，如果有自己的域名的话可以填写，也可以随便起个名字（Test、Tom、Jerry……）。选择完之后，点击 Deploy Server 生成服务器。</p>
<h3 id="4-查看服务器">4. 查看服务器</h3>
<p>点击最上方导航栏的 Cumpute，就可以看到你刚刚选购完的服务器了，点击 Manage 进入管理页面。</p>
<p><img src="https://raw.githubusercontent.com/Littlecowherd/Images/master/markdown/cc20190311173956.png" alt=""></p>
<p>通过管理界面，你可以查看 VPS 实例的资源使用情况，或者进行开关机、重启、连接终端、更换操作系统、销毁vps等一系列操作。</p>
<p><img src="https://raw.githubusercontent.com/Littlecowherd/Images/master/markdown/cc20190311170422.png" alt="实例详细信息"></p>
<p>如果你想看更详细的资源使用信息（CPU 利用率、内存用量、网速、硬盘用量、平均负载），需要点击上图中的红框，获取安装 stats colelctor 插件的命令，完成安装后即可查看详细资源信息。</p>
<p><em>P.S.  3 TB = 3072 GB，我从来没用完过……</em></p>
<h3 id="5-连接并管理服务器">5. 连接并管理服务器</h3>
<p>推荐使用 Xshell、Mobaxterm、Putty 等 SSH 工具管理你的 VPS。</p>
<p>在你完成购买后，CloudCone 会将该实例的 IP 地址、用户名和密码发送到你的注册邮箱，如果你没收到的话，注意查看下垃圾箱。实在不行的话，可以通过 Access → Reset root password 重新获取，如下图。</p>
<p><img src="https://raw.githubusercontent.com/Littlecowherd/Images/master/markdown/cc20190311171918.png" alt="重置密码"></p>
<p>使用 SSH 连接到服务器，然后部署小飞机之类的，基本配置并不复杂，这里就不展开讲了。（具体步骤可以去看小飞机的文档：<a href="https://github.com/shadowsocks/shadowsocks/wiki/Shadowsocks-%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E">地址</a>）</p>
<h3 id="6-科学上网测试">6. 科学上网测试</h3>
<p>测试环境：200M带宽<br>
效果如下图，有兴趣的朋友可以上手试试。</p>
<p><img src="https://raw.githubusercontent.com/Littlecowherd/Images/master/markdown/cc20190311172855.png" alt="Youtobe"></p>
]]></content>
    </entry>
</feed>